# syntax=docker/dockerfile:1.7
# Simple development Dockerfile for NestJS API
# Focused on simplicity and avoiding permission issues

FROM oven/bun:1.2.14-alpine

# Install system dependencies
RUN apk add --no-cache curl wget bash git python3 make g++ supervisor

# Copy Node.js 22 installation from the Node.js image (binaries + libraries)
COPY --from=node:22-alpine /usr/local /usr/local

# Create symbolic links to ensure they're in PATH
RUN ln -sf /usr/local/bin/node /usr/bin/node && \
    ln -sf /usr/local/bin/npm /usr/bin/npm && \
    ln -sf /usr/local/bin/npx /usr/bin/npx

# Install NestJS CLI globally
RUN bun install -g @nestjs/cli

# Set working directory
WORKDIR /app

# Copy workspace configuration files for dependency installation
COPY package.json bun.lock* ./
COPY turbo.json ./
COPY tsconfig.json ./
COPY apps/api/package.json ./apps/api/
COPY packages/ ./packages/

# Install dependencies (this layer will be cached)
RUN --mount=type=cache,target=/root/.bun/install/cache bun install

# Copy supervisord config
COPY apps/api/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy entrypoint script
COPY scripts/api-dev-entrypoint.sh /usr/local/bin/api-dev-entrypoint.sh
RUN chmod +x /usr/local/bin/api-dev-entrypoint.sh

# Set development environment
ENV NODE_ENV=development
ENV LOG_LEVEL=debug

# The actual source code will be mounted via docker-compose volumes
# This avoids all permission issues with bind mounts
CMD ["/usr/local/bin/api-dev-entrypoint.sh"]
