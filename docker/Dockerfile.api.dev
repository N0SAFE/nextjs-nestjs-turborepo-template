# syntax=docker/dockerfile:1-labs
# Development Dockerfile for NestJS API
# Multi-stage build with pruner for optimized dependencies
# Supports BuildKit cache mounts for faster rebuilds

# ===================================
# Stage 1: Base - Common dependencies
# ===================================
FROM oven/bun:1.3.1-alpine AS base

# Install system dependencies
RUN apk add --no-cache curl wget bash git python3 make g++

# Copy Node.js 22 installation from the Node.js image (binaries + libraries)
COPY --from=node:22-alpine /usr/local /usr/local

# Create symbolic links to ensure they're in PATH
RUN ln -sf /usr/local/bin/node /usr/bin/node && \
    ln -sf /usr/local/bin/npm /usr/bin/npm && \
    ln -sf /usr/local/bin/npx /usr/bin/npx

# Install Turbo and NestJS CLI globally with cache mount
RUN --mount=type=cache,target=/root/.bun \
    bun install -g turbo@^2 @nestjs/cli

WORKDIR /app

# ===================================
# Stage 2: Pruner - Prune monorepo for api and install dependencies
# ===================================
FROM base AS pruner

# Copy workspace configuration files needed for turbo prune
COPY . .

# Run turbo prune to isolate api and its dependencies (use cache mount for bun)
RUN --mount=type=cache,target=/root/.bun \
    bun x turbo prune api --docker

FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app

# First install the dependencies (as they change less often)
# Use BuildKit cache mounts for bun cache to speed up repeated builds
COPY --from=pruner /app/out/full/ .
RUN --mount=type=cache,target=/root/.bun \
    --mount=type=cache,target=/root/.cache \
    bun ci

# ===================================
# Stage 3: Runner - Development runtime
# ===================================
FROM base AS runner
WORKDIR /app

# Create npm symlink to avoid "npm not found" warnings during Next.js build
RUN ln -sf $(which bun) /usr/local/bin/npm

# Set development environment
ENV NODE_ENV=development
ENV LOG_LEVEL=debug

COPY scripts/diagnose-build.ts ./scripts/diagnose-build.ts
COPY apps/api/scripts/entrypoint.dev.ts ./apps/api/scripts/entrypoint.dev.ts
COPY --from=pruner /app/out/full/package.json /app/out/bun.lock* /app/out/full/turbo.json ./
COPY --from=pruner /app/out/full/apps/ /app/apps/
COPY --from=pruner /app/out/full/packages/ /app/packages/
COPY --from=installer --parents /app/node_modules /app/**/node_modules /
COPY --parents --chmod=a+w .turbo/ **/.turbo/ ./

# Run build during image build (runner stage) so compilation happens at build time.
# Use BuildKit cache for bun to speed up subsequent builds.
RUN --mount=type=cache,target=/root/.bun \
    bun x turbo run build --filter=api... --filter=!api

# Start the API dev server at container runtime only.
CMD ["sh", "-c", "bun x turbo run api#dev"]
