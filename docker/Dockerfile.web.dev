# syntax=docker/dockerfile:1-labs
# Development Dockerfile for Next.js Web App
# Multi-stage build with separate installer and runner stages
# Supports BuildKit cache mounts for faster rebuilds

# ===================================
# Stage 1: Base - Common dependencies
# ===================================
FROM oven/bun:1.3.1-alpine AS base

# Install system dependencies including build tools for native modules
RUN apk add --no-cache \
    libc6-compat \
    curl \
    bash \
    python3 \
    make \
    g++ \
    gcc \
    musl-dev

# Install Turbo globally with cache mount
RUN --mount=type=cache,target=/root/.bun \
    bun install -g turbo@^2

WORKDIR /app

# ===================================
# Stage 2: Pruner - Prune monorepo for web app and install dependencies
# ===================================
FROM base AS pruner

WORKDIR /app

# Copy workspace configuration files needed for turbo prune
COPY package.json bun.lock* ./
COPY turbo.json ./
COPY apps/ ./apps/
COPY packages/ ./packages/

# Run turbo prune to isolate web app and its dependencies (use cache mount for bun)
RUN --mount=type=cache,target=/root/.bun \
    bun x turbo prune web --docker

FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app

# First install the dependencies (as they change less often)
# Use BuildKit cache mounts for bun cache to speed up repeated builds
COPY --from=pruner /app/out/full/ .
RUN --mount=type=cache,target=/root/.bun \
    --mount=type=cache,target=/root/.cache \
    bun ci

# ===================================
# Stage 3: Runner - Development runtime
# ===================================
FROM base AS runner
WORKDIR /app

# Create npm symlink to avoid "npm not found" warnings during Next.js build
RUN ln -sf $(which bun) /usr/local/bin/npm

# Set development environment
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV LOG_LEVEL=debug

COPY scripts/diagnose-build.ts ./scripts/diagnose-build.ts
COPY apps/web/scripts/entrypoint.dev.ts ./apps/web/scripts/entrypoint.dev.ts
COPY --from=pruner /app/out/full/package.json /app/out/bun.lock* /app/out/full/turbo.json ./
COPY --from=pruner /app/out/full/apps/ /app/apps/
COPY --from=pruner /app/out/full/packages/ /app/packages/
COPY --from=installer --parents /app/node_modules /app/**/node_modules /
COPY --parents --chmod=a+w .turbo/ **/.turbo/ ./

# Run build during image build (runner stage) so the heavy compile work
# happens at build time instead of container startup. Use BuildKit cache for bun.
RUN --mount=type=cache,target=/root/.bun \
    bun x turbo run build --filter=web... --filter=!web

# Start the development web server at container runtime only.
CMD ["sh", "-c", "bun x turbo run web#dev"]
