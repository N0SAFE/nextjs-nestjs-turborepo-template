# syntax=docker/dockerfile:1.7
# Simple development Dockerfile for Docs App
# Focused on simplicity and avoiding permission issues

FROM oven/bun:1.2.21-alpine AS pruner

# Install system dependencies
RUN apk add --no-cache libc6-compat curl bash

# Install Turbo globally
RUN bun install -g turbo@^2

# Set working directory
WORKDIR /app

# Copy entire workspace for turbo prune
COPY . .

# Prune the workspace to only include doc and its dependencies
RUN bun x turbo prune doc --docker

# Stage 2: Install dependencies
FROM oven/bun:1.2.21-alpine AS installer

# Set working directory
WORKDIR /app

# Copy pruned lock file and package.json files from pruner stage
COPY --from=pruner /app/out/json/ .
COPY --from=pruner /app/out/bun.lock* ./bun.lock

# Install dependencies from pruned workspace
RUN --mount=type=cache,target=/root/.bun/install/cache bun install --ignore-scripts

# Stage 3: Runtime
FROM oven/bun:1.2.21-alpine

# Install system dependencies
RUN apk add --no-cache libc6-compat curl bash

# Install Turbo globally
RUN bun install -g turbo@^2

# Set working directory
WORKDIR /app

# Copy installed node_modules from installer stage
COPY --from=installer /app/node_modules ./node_modules
COPY --from=installer /app/apps ./apps
COPY --from=installer /app/packages ./packages
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1

# Set working directory to the doc app
WORKDIR /app/apps/doc

# The actual source code will be mounted via docker-compose volumes
# This avoids all permission issues with bind mounts
CMD ["bun", "x", "next", "dev", "-H", "0.0.0.0", "-p", "3020"]
