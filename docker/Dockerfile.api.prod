# Production Dockerfile for NestJS API
# Multi-stage build for optimized production image

# syntax=docker/dockerfile:1.7
FROM oven/bun:1.2.14-alpine AS base
ENV NODE_ENV=production

# Install dependencies only when needed
FROM base AS builder
ENV TURBO_CACHE_DIR=/root/.cache/turbo
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install Turbo globally
RUN --mount=type=cache,target=/root/.bun/install/cache bun install -g turbo@^2

# Copy everything and prune for API app
COPY . .
RUN --mount=type=cache,target=/root/.cache/turbo \
  turbo prune api --docker

# Install dependencies for building
FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app

# First install the dependencies (as they change less often)
COPY --from=builder /app/out/json/ .
RUN rm -f bun.lock # this is a workaround because when using the --frozen-lockfile i have a probleme with the way the turbo prune work with bun and it corrupt my bun.lock
RUN bun install

# Build the project
COPY --from=builder /app/out/full/ .
RUN bun turbo run build

# Production runner
FROM base AS runner
WORKDIR /app

# Install runtime dependencies for NestJS
RUN apk add --no-cache curl wget bash python3 make g++

# Create app user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Copy built application
COPY --from=installer --chown=nestjs:nodejs /app ./

# Switch to non-root user
USER nestjs

# Change to API directory
WORKDIR /app/apps/api

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1

# Start the application with migrations
CMD ["sh", "-c", "bun run db:migrate && bun --bun dist/src/main"]
