# syntax=docker/dockerfile:1-labs
# Production Dockerfile for NestJS API
# Multi-stage build for optimized production image

# Stage 1: Base - Install global dependencies and set environment
FROM oven/bun:1.3.1-alpine AS base
ENV NODE_ENV=production

# Install system dependencies and Turbo
RUN apk add --no-cache libc6-compat
RUN --mount=type=cache,target=/root/.bun/install/cache bun install -g turbo@^2

# Copy Node.js 22 from later stage if available, otherwise use system Node
# Install Node.js for NestJS compatibility
RUN apk add --no-cache nodejs
WORKDIR /app

# Stage 2: Pruner - Prune monorepo for API dependencies
FROM base AS pruner
COPY . .
RUN --mount=type=cache,target=/root/.cache/turbo \
  turbo prune api --docker

# Stage 3: Installer - Install dependencies from pruned lockfile
FROM base AS installer
RUN apk add --no-cache python3 make g++ gcc musl-dev

COPY --from=pruner /app/out/full/ .
RUN --mount=type=cache,target=/root/.bun --mount=type=cache,target=/root/.cache \
  bun ci

# Stage 4: Builder - Build the application
FROM base AS builder
RUN apk add --no-cache python3 make g++ gcc musl-dev

COPY --from=pruner /app/out/full/package.json /app/out/bun.lock* /app/out/full/turbo.json ./
COPY --from=pruner /app/out/full/apps/ /app/apps/
COPY --from=pruner /app/out/full/packages/ /app/packages/
COPY --from=installer --parents /app/node_modules /app/**/node_modules /
COPY --parents --chmod=a+w .turbo/ **/.turbo/ ./

RUN --mount=type=cache,target=/root/.bun --mount=type=cache,target=/root/.cache \
  bun turbo run build --filter=api...

# Stage 5: Production Runner - Run the built application
FROM base AS runner
WORKDIR /app

# Install runtime dependencies for NestJS
RUN apk add --no-cache curl wget bash python3 make g++

# Create app user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Copy built application from builder stage
COPY --from=builder --chown=nestjs:nodejs /app ./

# Ensure writable directories exist and are owned by the app user
RUN mkdir -p /app/uploads /app/extracted /app/static-files && \
  chown -R nestjs:nodejs /app

# Switch to non-root user
USER nestjs

# Change to API directory
WORKDIR /app

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1

# Start the application
CMD ["sh", "-c", "bun x turbo run api#start"]
