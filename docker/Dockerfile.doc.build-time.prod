# syntax=docker/dockerfile:1-labs
# Production Dockerfile for Documentation App - BUILD-TIME COMPILATION
# This version builds the documentation during Docker build phase
# Recommended for: Render, Vercel, and platforms that scan for open ports during build

# Stage 1: Base - Install global dependencies and set environment
FROM oven/bun:1.3.1-alpine AS base
ENV NODE_ENV=production

# Set build-time environment variables for Next.js
ARG API_URL=http://localhost:3001
ARG NEXT_PUBLIC_API_URL=http://localhost:3001
ARG API_PORT=3001
ARG NEXT_PUBLIC_APP_URL=http://localhost:3000
ARG NEXT_PUBLIC_APP_PORT=3000
ARG NEXT_PUBLIC_DOC_URL=http://localhost:3020
ARG NEXT_PUBLIC_DOC_PORT=3020
ARG API_PING_PATH=/health
ARG API_ADMIN_TOKEN=secret-admin-token
ARG AUTH_SECRET=QgafJQw3O/k1gambz7YGKjtj5ZZe0dnL/WlSw4PtMDc=

ENV API_URL=$API_URL
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV API_PORT=$API_PORT
ENV NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL
ENV NEXT_PUBLIC_APP_PORT=$NEXT_PUBLIC_APP_PORT
ENV NEXT_PUBLIC_DOC_URL=$NEXT_PUBLIC_DOC_URL
ENV NEXT_PUBLIC_DOC_PORT=$NEXT_PUBLIC_DOC_PORT
ENV API_PING_PATH=$API_PING_PATH
ENV API_ADMIN_TOKEN=$API_ADMIN_TOKEN
ENV AUTH_SECRET=$AUTH_SECRET

# Install system dependencies and Turbo
RUN apk add --no-cache libc6-compat dumb-init
RUN --mount=type=cache,target=/root/.bun/install/cache bun install -g turbo@^2
WORKDIR /app

# Stage 2: Pruner - Prune monorepo for documentation dependencies
FROM base AS pruner
COPY . .
RUN --mount=type=cache,target=/root/.cache/turbo \
  turbo prune doc --docker

# Stage 3: Installer - Install dependencies from pruned lockfile
FROM base AS installer
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    gcc \
    musl-dev

COPY --from=pruner /app/out/full/ .
RUN --mount=type=cache,target=/root/.bun --mount=type=cache,target=/root/.cache \
  bun ci

# Stage 4: Builder - Build the application
FROM base AS builder
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    gcc \
    musl-dev

COPY --from=pruner /app/out/full/package.json /app/out/bun.lock* /app/out/full/turbo.json ./
COPY --from=pruner /app/out/full/apps*/ /app/apps/
COPY --from=pruner /app/out/full/packages*/ /app/packages/
COPY --from=installer --parents /app/node_modules /app/**/node_modules /
COPY --parents --chmod=a+w .turbo/ **/.turbo/ ./

RUN --mount=type=cache,target=/root/.bun --mount=type=cache,target=/root/.cache \
  bun turbo run generate --filter=doc...

RUN --mount=type=cache,target=/root/.bun --mount=type=cache,target=/root/.cache \
  bun turbo run build --filter=doc...

# Stage 5: Production Runner - Run the built application
FROM base AS runner
WORKDIR /app

# Install Node.js and other production runtime dependencies
RUN apk add --no-cache nodejs
ENV PATH="/usr/bin:${PATH}"
RUN ln -sf $(which bun) /usr/local/bin/npm

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app ./

# Switch to nextjs user
USER nextjs

# Expose port
EXPOSE 3020

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=${NEXT_PUBLIC_DOC_PORT}

# Health check for deployment platforms
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider ${NEXT_PUBLIC_DOC_URL} || exit 1

WORKDIR /app
ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "bun x turbo run doc#start"]
