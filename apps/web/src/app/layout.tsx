// import { Monitoring } from 'react-scan/monitoring/next'
import '@repo/ui/styles/globals.css' // ! load the local stylesheets first to allow for overrides of the ui package components
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { cn } from '@repo/ui/lib/utils'
import ThemeProvider from '@repo/ui/components/theme-provider'
import Loader from '@repo/ui/components/atomics/atoms/Loader'
import ReactQueryProviders from '@/utils/providers/ReactQueryProviders'
import { Suspense, type JSX } from 'react'
import NextAuthProviders from '@/utils/providers/NextAuthProviders/index'
import NextTopLoader from 'nextjs-toploader'
import Script from 'next/script'
import { validateEnv } from '#/env'
import MainNavigation from '@/components/navigation/MainNavigation'
import { DynamicTanstackDevTools } from '@/components/devtools/DynamicTanstackDevTools'
import { z } from 'zod'
import { defineLayout, makeLayout, withLayout } from '@/routes/makeRoute'
import { useLayoutData } from '@/routes/hooks'

const fontSans = Inter({ subsets: ['latin'], variable: '--font-sans' })

export const metadata: Metadata = {
    title: 'Create Turborepo',
    description: 'Generated by create turbo',
}

// Create layout using defineLayout pattern - types are automatically inferred!
const RootLayoutComponent = defineLayout(() => {
    // Inner state function - called inside renderChildren to access provider context
    // This allows child components to use hooks like useSession() from Better Auth
    const useState = () => {
        'use client'
        // REAL IMPLEMENTATION: Use Better Auth's useSession() hook
        // This requires being inside NextAuthProviders context
        // Uncomment when ready to use:
        // import { useSession } from '@/lib/auth-client'
        // const session = useSession()
        // return {
        //     session: session.data,
        //     isLoading: session.isPending,
        //     error: session.error?.message ?? null,
        // }

        // DEMO: Placeholder return for now
        return {
            session: null,
            isLoading: false,
            error: null as string | null,
        }
    }

    // Layout data - types inferred from return value
    const env = validateEnv(process.env)
    const data = {
        appName: 'Turborepo Template',
        version: '1.0.0',
        env: {
            isDevelopment: process.env.NODE_ENV === 'development',
            reactScan: !!env.REACT_SCAN,
            reactScanToken: env.REACT_SCAN_TOKEN,
            commitHash: env.REACT_SCAN_GIT_COMMIT_HASH,
            branch: env.REACT_SCAN_GIT_BRANCH,
        },
        metadata: {
            title: metadata.title as string,
            description: metadata.description as string,
        },
    }

    // UI renderer - TypeScript infers the useState function type from above
    const ui = (
        renderChildren: (
            useState: () => {
                session: null
                isLoading: boolean
                error: string | null
            }
        ) => React.ReactNode
    ) => {
        return (
            <html lang="en">
                <head>
                    {data.env.isDevelopment && data.env.reactScan && (
                        <Script
                            src="https://unpkg.com/react-scan/dist/auto.global.js"
                            strategy="beforeInteractive"
                            async
                        />
                    )}
                </head>
                <body
                    className={cn(
                        fontSans.variable,
                        'bg-background flex h-dvh w-dvw flex-col font-sans antialiased'
                    )}
                >
                    {data.env.isDevelopment &&
                        data.env.reactScan &&
                        data.env.reactScanToken && (
                            // <Monitoring
                            //     apiKey={data.env.reactScanToken}
                            //     url="https://monitoring.react-scan.com/api/v1/ingest"
                            //     commit={data.env.commitHash}
                            //     branch={data.env.branch}
                            // />
                            <></>
                        )}
                    <NextAuthProviders>
                        <ThemeProvider
                            attribute="class"
                            defaultTheme="system"
                            enableSystem
                            disableTransitionOnChange
                        >
                            <NextTopLoader />
                            <MainNavigation />
                            <ReactQueryProviders>
                                <Suspense
                                    fallback={
                                        <div className="flex h-screen w-screen items-center justify-center">
                                            <Loader />
                                        </div>
                                    }
                                >
                                    <main className="flex flex-1 flex-col overflow-y-auto">
                                        {renderChildren(useState)}
                                    </main>
                                </Suspense>

                                <DynamicTanstackDevTools />
                            </ReactQueryProviders>
                        </ThemeProvider>
                    </NextAuthProviders>
                </body>
            </html>
        )
    }

    const state = {
        ui,
        data,
        useState,
    }

    return state
})

// Create layout builder
export const RootLayout = makeLayout(
    '/',
    {
        name: 'root',
        params: z.object({}),
        search: z.object({}),
        description: 'Root layout with theme, navigation, and providers',
    },
    RootLayoutComponent
)

// Export default for Next.js App Router
export default async function RootLayoutWrapper({
    children,
}: {
    children: React.ReactNode
}) {
    return RootLayoutComponent({ children }) as JSX.Element
}

const a = function t () {
    const {

    } = useLayoutData(RootLayout)
}