/**
 * EXAMPLE GENERATED LAYOUT INFO FILE
 * 
 * This file should be automatically generated by the declarative routing build system
 * when it detects a layout.tsx file that exports functions wrapped with defineLayout.
 * 
 * Purpose:
 * - Extract static data from layouts without rendering them or executing hooks
 * - Allow the routing system to understand layout hierarchy and requirements
 * - Enable type-safe layout configuration
 */

import { z } from 'zod'

// Import the layout state functions
import { DashboardLayout, PublicLayout } from './target.layout'

/**
 * Extract layout data by calling the layout state function with dummy params
 * and accessing the .data property (which doesn't require rendering)
 */
const dashboardLayoutState = DashboardLayout({ children: null })
const publicLayoutState = PublicLayout({ children: null })

/**
 * Schema for layout metadata/data
 */
export const LayoutDataSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  requiresAuth: z.boolean().optional()
})

/**
 * Export the layout configurations for the routing system
 * 
 * NOTE: Only the static .data is exposed, not the .ui or .innerState
 * This allows the routing system to check requirements without rendering
 */
export const Layouts = {
  Dashboard: {
    name: 'Dashboard',
    data: dashboardLayoutState.data,
    dataSchema: LayoutDataSchema,
    // Type information about innerState (for TypeScript)
    innerStateType: {} as ReturnType<typeof dashboardLayoutState.innerState>,
  },
  Public: {
    name: 'Public',
    data: publicLayoutState.data,
    dataSchema: LayoutDataSchema,
    innerStateType: {} as ReturnType<typeof publicLayoutState.innerState>,
  }
} as const

/**
 * Helper types
 */
export type LayoutData = z.infer<typeof LayoutDataSchema>
export type LayoutsType = typeof Layouts

// Type-safe access to specific layout inner states
export type DashboardInnerState = ReturnType<typeof dashboardLayoutState.innerState>
export type PublicInnerState = ReturnType<typeof publicLayoutState.innerState>

/**
 * Example usage in routing system or middleware:
 * 
 * ```typescript
 * import { Layouts } from './layout.info'
 * 
 * // Check if layout requires authentication before rendering
 * if (Layouts.Dashboard.data.requiresAuth && !session) {
 *   redirect('/login')
 * }
 * 
 * // Get layout title for page metadata
 * const title = Layouts.Dashboard.data.title
 * 
 * // Access type information (TypeScript only, no runtime)
 * type DashboardState = typeof Layouts.Dashboard.innerStateType
 * // DashboardState = { sidebarOpen: boolean, toggleSidebar: () => void }
 * ```
 * 
 * Example usage in a page component:
 * 
 * ```typescript
 * import { DashboardLayout } from './layout'
 * 
 * export default function MyPage() {
 *   const layout = DashboardLayout({ children: null })
 *   const innerState = layout.innerState()
 *   
 *   return (
 *     <div>
 *       <p>Sidebar: {innerState.sidebarOpen ? 'open' : 'closed'}</p>
 *       <button onClick={innerState.toggleSidebar}>Toggle</button>
 *     </div>
 *   )
 * }
 * ```
 */
