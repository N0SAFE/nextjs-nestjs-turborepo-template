services:
    # Database for development
    api-db-dev:
        container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-db-dev
        image: postgres:16-alpine
        restart: unless-stopped
        environment:
            POSTGRES_USER: ${DB_USER:-postgres}
            POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
            POSTGRES_DB: ${DB_DATABASE:-nestjs_api}
        volumes:
            - api_db_data_dev:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_DATABASE:-nestjs_api}"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app_network_dev

    # # Redis cache for development
    # api-cache-dev:
    #     container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-cache-dev
    #     image: redis:8-alpine
    #     restart: unless-stopped
    #     healthcheck:
    #         test: ["CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #         start_interval: 5s
    #         start_period: 30s
    #     networks:
    #         - app_network_dev

    # NestJS API for development
    api-dev:
        container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-dev
        build:
            context: .
            dockerfile: ./docker/Dockerfile.api.dev
            tags:
              - "${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-dev:latest"
              - "${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-dev:${API_VERSION:-dev}"
        user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
        depends_on:
            api-db-dev:
                condition: service_healthy
            # api-cache-dev:
            #     condition: service_healthy
        restart: unless-stopped
        mem_limit: 2g
        memswap_limit: 2g
        ports:
            - "${API_PORT:-3005}:${API_PORT:-3005}"
            - "${DRIZZLE_STUDIO_PORT:-4983}:4983"
        volumes:
            # Mount source code for hot reloading
            - ./apps/api:/app/apps/api
            # Mount essential configuration files needed for NestJS build
            - ./apps/api/nest-cli.json:/app/apps/api/nest-cli.json
            - ./apps/api/tsconfig.json:/app/apps/api/tsconfig.json
            - ./apps/api/tsconfig.build.json:/app/apps/api/tsconfig.build.json
            # Keep packages in sync
            - ./packages:/app/packages
            # Anonymous volumes for dependencies only (not dist)
            - /app/node_modules
            - /app/apps/api/node_modules
            # No dist volume - let TypeScript create it on the fly
            # Persistent caches (shared with web/doc for faster cold starts)
            - bun_cache_dev:/root/.bun/install/cache
            - turbo_cache_dev:/root/.cache/turbo
        environment:
            NODE_ENV: development
            API_PORT: ${API_PORT:-3005}
            DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@api-db-dev:5432/${DB_DATABASE:-nestjs_api}
            REDIS_URL: redis://api-cache-dev:6379
            NEXT_PUBLIC_WEB_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
            # CORS Configuration for cross-origin requests from web app
            CORS_ORIGIN: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
            # Development specific settings
            LOG_LEVEL: debug
            # Enable polling for file watching to avoid EBUSY errors in Docker on Windows
            CHOKIDAR_USEPOLLING: "true"
            BETTER_AUTH_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
            BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-better-auth-fallback-secret}
            # Traefik Configuration
            TRAEFIK_DOMAIN: ${TRAEFIK_DOMAIN:-localhost}
            TRAEFIK_ACME_EMAIL: ${TRAEFIK_ACME_EMAIL:-admin@localhost}
            # Turbo Remote Cache Configuration
            TURBO_TOKEN: ${TURBO_TOKEN}
            TURBO_TEAM: ${TURBO_TEAM}
        healthcheck:
            test: wget --no-verbose --tries=1 --spider http://127.0.0.1:${API_PORT:-3005}/health || exit 1
            start_period: 15s
            interval: 15s
            timeout: 15s
            retries: 5
        networks:
            - app_network_dev

    # Next.js web app for development with HMR
    web-dev:
        container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-web-dev
        build:
            context: .
            dockerfile: ./docker/Dockerfile.web.dev
            tags:
              - "${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-web-dev:latest"
              - "${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-web-dev:${WEB_VERSION:-dev}"
            args:
                - NODE_ENV=development
                - API_PORT=${API_PORT:-3005}
                - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
                - NEXT_PUBLIC_APP_PORT=${NEXT_PUBLIC_APP_PORT:-3000}
        user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
        restart: unless-stopped
        mem_limit: 4g
        memswap_limit: 4g
        ports:
            - "${NEXT_PUBLIC_APP_PORT:-3000}:${NEXT_PUBLIC_APP_PORT:-3000}"
        volumes:
            # Mount source code for hot reloading
            - .:/app
            # Anonymous volumes for dependencies only (not .next)
            - /app/node_modules
            - /app/apps/web/node_modules
            # No .next volume - let Next.js create it on the fly
            # Persistent build caches (named volumes) to speed up installs/builds
            - bun_cache_dev:/root/.bun/install/cache
            - turbo_cache_dev:/root/.cache/turbo
        depends_on:
            api-dev:
                condition: service_healthy
        environment:
            - NODE_ENV=development
            # Server-side API URL (internal Docker network)
            - API_URL=http://${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-api-dev:${API_PORT:-3005}
            # Client-side API URL (localhost for browser)
            - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT:-3005}
            - API_PORT=${API_PORT:-3005}
            - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
            - NEXT_PUBLIC_APP_PORT=${NEXT_PUBLIC_APP_PORT:-3000}
            # Auth configuration
            - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET:-better-auth-fallback-secret}
            - BETTER_AUTH_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
            # Docs URL (for navbar link)
            - NEXT_PUBLIC_DOC_PORT=${NEXT_PUBLIC_DOC_PORT:-3020}
            - NEXT_PUBLIC_DOC_URL=${NEXT_PUBLIC_DOC_URL:-http://localhost:${NEXT_PUBLIC_DOC_PORT:-3020}}
            # Debug configuration
            - NEXT_PUBLIC_DEBUG=${NEXT_PUBLIC_DEBUG}
            # Enable hot reloading
            - WATCHPACK_POLLING=true
            # Turbo Remote Cache Configuration
            - TURBO_TOKEN=${TURBO_TOKEN}
            - TURBO_TEAM=${TURBO_TEAM}
            - CHOKIDAR_USEPOLLING=true
        networks:
            - app_network_dev

    # # Fumadocs docs app for development with HMR
    # doc-dev:
    #     container_name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-doc-dev
    #     build:
    #         context: .
    #         dockerfile: ./docker/Dockerfile.doc.dev
    #         tags:
    #           - "${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-doc-dev:latest"
    #           - "${COMPOSE_PROJECT_NAME:-nextjs-nestjs}-doc-dev:${DOC_VERSION:-dev}"
    #     user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    #     restart: unless-stopped
    #     mem_limit: 2g
    #     memswap_limit: 2g
    #     ports:
    #         - "${NEXT_PUBLIC_DOC_PORT:-3020}:3020"
    #     volumes:
    #         # Mount source code for hot reloading
    #         - .:/app
    #         # Anonymous volumes for dependencies only (not .next)
    #         - /app/node_modules
    #         - /app/apps/doc/node_modules
    #         # No .next volume - let Next.js create it on the fly
    #         # Persistent caches
    #         - bun_cache_dev:/root/.bun/install/cache
    #         - turbo_cache_dev:/root/.cache/turbo
    #     depends_on:
    #         api-dev:
    #             condition: service_healthy
    #     environment:
    #         - NODE_ENV=development
    #         # Enable hot reloading
    #         - WATCHPACK_POLLING=true
    #         - CHOKIDAR_USEPOLLING=true
    #     networks:
    #         - app_network_dev

networks:
    app_network_dev:
        name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}_app_network_dev
        driver: bridge
        driver_opts:
            com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"

volumes:
    api_db_data_dev:
        name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}_api_db_data_dev
    bun_cache_dev:
        name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}_bun_cache_dev
    turbo_cache_dev:
        name: ${COMPOSE_PROJECT_NAME:-nextjs-nestjs}_turbo_cache_dev
