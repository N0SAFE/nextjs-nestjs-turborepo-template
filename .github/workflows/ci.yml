name: CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        # Run tests on all PRs regardless of target branch
        branches: ["**"]

env:
    BUN_VERSION: "1.2.14"
    NODE_VERSION: "22"
    TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
    # Job 0: Setup - Install dependencies and prepare environment
    setup:
        name: üîß Setup & Install Dependencies
        runs-on: ubuntu-latest
        timeout-minutes: 10
        outputs:
            cache-hit: ${{ steps.cache-dependencies.outputs.cache-hit }}
        steps:
            - name: üìö Checkout repository
              uses: actions/checkout@v5

            - name: üíæ Cache Bun dependencies
              id: cache-dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.bun
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                      bun.lockb
                  key: bun-deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}
                  restore-keys: |
                      bun-deps-${{ runner.os }}-

            - name: üê∞ Setup Bun
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: üì¶ Install dependencies
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: |
                if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
                  echo "Dependabot PR detected: running bun install without --frozen-lockfile"
                  bun install
                else
                  bun install --frozen-lockfile
                fi

    # Job 1: Generate Declarative Routes
    generate-declarative-routes:
        name: üìù Generate Declarative Routes
        runs-on: ubuntu-latest
        timeout-minutes: 8
        needs: setup
        outputs:
            cache-hit: ${{ steps.cache-declarative-routes.outputs.cache-hit }}
        steps:
            - name: üìö Checkout repository
              uses: actions/checkout@v5

            - name: üíæ Cache declarative routes
              id: cache-declarative-routes
              uses: actions/cache@v4
              with:
                  path: |
                      apps/web/src/routes/index.ts
                      apps/web/src/routes/openapi.ts
                      apps/web/openapi-docs.yml
                      apps/web/redoc-static.html
                  key: declarative-routes-${{ runner.os }}-${{ hashFiles('apps/web/src/**/page.tsx', 'apps/web/src/**/page.info.ts') }}
                  restore-keys: |
                      declarative-routes-${{ runner.os }}-

            - name: üê∞ Setup Bun
              if: steps.cache-declarative-routes.outputs.cache-hit != 'true'
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: üíæ Restore Bun dependencies cache
              if: steps.cache-declarative-routes.outputs.cache-hit != 'true'
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.bun
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                      bun.lockb
                  key: bun-deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}
                  restore-keys: |
                      bun-deps-${{ runner.os }}-

            - name: üõ§Ô∏è Generate declarative routes
              if: steps.cache-declarative-routes.outputs.cache-hit != 'true'
              run: bun run --cwd apps/web dr:build

            - name: üìù Generate OpenAPI documentation
              if: steps.cache-declarative-routes.outputs.cache-hit != 'true'
              run: |
                  cd apps/web
                  bun run openapi:yaml
                  bun run openapi:html

    # Job 2: Lint and Type Check
    lint-and-typecheck:
        name: üîç Lint & Type Check
        runs-on: ubuntu-latest
        timeout-minutes: 8
        needs: [setup]
        env:
            # Essential environment variables for linting/type checking
            API_URL: http://localhost:8055/
            API_PORT: 8055
            API_PING_PATH: /server/health
            API_ADMIN_TOKEN: ci-test-admin-token
            NEXT_PUBLIC_APP_URL: http://localhost:3003/
            NEXT_PUBLIC_APP_PORT: 3003
            AUTH_SECRET: ci-test-auth-secret
            DIRECTUS_SECRET: ci-test-directus-secret
            DIRECTUS_ADMIN_EMAIL: ci-admin@test.com
            DIRECTUS_ADMIN_PASSWORD: ci-test-password
            NEXT_TELEMETRY_DISABLED: 1
            NODE_ENV: test
            MILLION_LINT: false
            REACT_SCAN: false
            SHOW_AUTH_LOGS: false
            NEXT_PUBLIC_SHOW_AUTH_LOGS: false

        steps:
            - name: üìö Checkout repository
              uses: actions/checkout@v5

            - name: üê∞ Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: üíæ Restore Bun dependencies cache
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.bun
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                      bun.lockb
                  key: bun-deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}
                  restore-keys: |
                      bun-deps-${{ runner.os }}-

            - name: üîç Run ESLint
              run: bun run lint

    # Job 3: Build
    build:
        name: üèóÔ∏è Build
        runs-on: ubuntu-latest
        timeout-minutes: 12
        needs: [lint-and-typecheck, generate-declarative-routes]
        env:
            # API Configuration
            API_URL: http://localhost:8055/
            API_PORT: 8055
            API_PING_PATH: /server/health
            API_ADMIN_TOKEN: ci-test-admin-token

            # App Configuration
            NEXT_PUBLIC_APP_URL: http://localhost:3003/
            NEXT_PUBLIC_APP_PORT: 3003

            # Database Configuration (for testing)
            DB_DATABASE: directus_test
            DB_ROOT_PASSWORD: test-password

            # Authentication
            AUTH_SECRET: ci-test-auth-secret-QgafJQw3O-k1gambz7YGKjtj5ZZe0dnL-WlSw4PtMDc

            # Directus Configuration
            DIRECTUS_SECRET: ci-test-directus-secret-value
            DIRECTUS_ADMIN_EMAIL: ci-admin@test.com
            DIRECTUS_ADMIN_PASSWORD: ci-test-password

            # Next.js Configuration
            NEXT_TELEMETRY_DISABLED: 1
            NODE_ENV: test

            # Development tools (disabled for CI)
            MILLION_LINT: false
            REACT_SCAN: false
            SHOW_AUTH_LOGS: false
            NEXT_PUBLIC_SHOW_AUTH_LOGS: false
            
            # Build optimization
            SKIP_STATIC_GENERATION: true

        steps:
            - name: üìö Checkout repository
              uses: actions/checkout@v5

            - name: üê∞ Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: üíæ Restore Bun dependencies cache
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.bun
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                      bun.lockb
                  key: bun-deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}
                  restore-keys: |
                      bun-deps-${{ runner.os }}-

            - name: üíæ Restore declarative routes cache
              uses: actions/cache@v4
              with:
                  path: |
                      apps/web/src/routes/index.ts
                      apps/web/src/routes/openapi.ts
                      apps/web/openapi-docs.yml
                      apps/web/redoc-static.html
                  key: declarative-routes-${{ runner.os }}-${{ hashFiles('apps/web/src/**/page.tsx', 'apps/web/src/**/page.info.ts') }}
                  restore-keys: |
                      declarative-routes-${{ runner.os }}-

            - name: üèóÔ∏è Build packages
              run: |
                  # Build shared packages first
                  bun x turbo run compile

    # Job 4: Test
    test:
        name: üß™ Test
        runs-on: ubuntu-latest
        timeout-minutes: 12
        needs: [lint-and-typecheck, generate-declarative-routes]
        env:
            # API Configuration
            API_URL: http://localhost:8055/
            API_PORT: 8055
            API_PING_PATH: /server/health
            API_ADMIN_TOKEN: ci-test-admin-token

            # App Configuration
            NEXT_PUBLIC_APP_URL: http://localhost:3003/
            NEXT_PUBLIC_APP_PORT: 3003

            # Database Configuration (for testing)
            DB_DATABASE: directus_test
            DB_ROOT_PASSWORD: test-password

            # Authentication
            AUTH_SECRET: ci-test-auth-secret-QgafJQw3O-k1gambz7YGKjtj5ZZe0dnL-WlSw4PtMDc

            # Directus Configuration
            DIRECTUS_SECRET: ci-test-directus-secret-value
            DIRECTUS_ADMIN_EMAIL: ci-admin@test.com
            DIRECTUS_ADMIN_PASSWORD: ci-test-password

            # Next.js Configuration
            NEXT_TELEMETRY_DISABLED: 1
            NODE_ENV: test

            # Development tools (disabled for CI)
            MILLION_LINT: false
            REACT_SCAN: false
            SHOW_AUTH_LOGS: false
            NEXT_PUBLIC_SHOW_AUTH_LOGS: false
            
            # Build optimization
            SKIP_STATIC_GENERATION: true

        steps:
            - name: üìö Checkout repository
              uses: actions/checkout@v5

            - name: üê∞ Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: üíæ Restore Bun dependencies cache
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.bun
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                      bun.lockb
                  key: bun-deps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}
                  restore-keys: |
                      bun-deps-${{ runner.os }}-

            - name: üß™ Run tests for all packages
              run: bun run test

    # Job 5: Deployment Ready Check
    deployment-ready:
        name: üöÄ Deployment Ready
        runs-on: ubuntu-latest
        timeout-minutes: 3
        needs: [setup, generate-declarative-routes, lint-and-typecheck, build, test]
        if: always()

        steps:
            - name: ‚úÖ Check deployment readiness
              run: |
                  echo "üîç Checking CI/CD pipeline results..."

                  SETUP_STATUS="${{ needs.setup.result }}"
                  LINT_STATUS="${{ needs.lint-and-typecheck.result }}"
                  BUILD_STATUS="${{ needs.build.result }}"
                  TEST_STATUS="${{ needs.test.result }}"
                  DR_STATUS="${{ needs.generate-declarative-routes.result }}"

                  # Cache hit information
                  BUN_CACHE_HIT="${{ needs.setup.outputs.cache-hit }}"
                  DR_CACHE_HIT="${{ needs.generate-declarative-routes.outputs.cache-hit }}"

                  echo "üìã Pipeline Results:"
                  echo "  - Setup & Dependencies: $SETUP_STATUS"
                  echo "  - Lint & Type Check: $LINT_STATUS"
                  echo "  - Build: $BUILD_STATUS"
                  echo "  - Test: $TEST_STATUS"
                  echo "  - Declarative Routes: $DR_STATUS"
                  
                  echo ""
                  echo "üéØ Cache Performance:"
                  echo "  - Bun Dependencies: $([ "$BUN_CACHE_HIT" = "true" ] && echo "‚úÖ Cache HIT" || echo "‚ùå Cache MISS")"
                  echo "  - Declarative Routes: $([ "$DR_CACHE_HIT" = "true" ] && echo "‚úÖ Cache HIT" || echo "‚ùå Cache MISS")"

                  if [ "$SETUP_STATUS" = "success" ] && [ "$LINT_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ] && [ "$TEST_STATUS" = "success" ] && [ "$DR_STATUS" = "success" ]; then
                    if [ "${{ github.ref }}" = "refs/heads/main" ]; then
                      echo "üöÄ ‚úÖ Ready for production deployment!"
                      echo "deployment_ready=true" >> $GITHUB_OUTPUT
                    else
                      echo "üöÄ ‚úÖ Ready for staging deployment!"
                      echo "deployment_ready=true" >> $GITHUB_OUTPUT
                    fi
                  else
                    echo "üöÄ ‚ùå Not ready for deployment"
                    echo "deployment_ready=false" >> $GITHUB_OUTPUT
                    exit 1
                  fi

            - name: üìã Generate deployment summary
              run: |
                  # Cache hit information
                  BUN_CACHE_HIT="${{ needs.setup.outputs.cache-hit }}"
                  DR_CACHE_HIT="${{ needs.generate-declarative-routes.outputs.cache-hit }}"
                  
                  echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Setup & Dependencies | ${{ needs.setup.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Lint & Type Check | ${{ needs.lint-and-typecheck.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Test | ${{ needs.test.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Declarative Routes | ${{ needs.generate-declarative-routes.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  
                  echo "### üéØ Cache Performance" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "| Cache Type | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Bun Dependencies | $([ "$BUN_CACHE_HIT" = "true" ] && echo "‚úÖ HIT" || echo "‚ùå MISS") |" >> $GITHUB_STEP_SUMMARY
                  echo "| Declarative Routes | $([ "$DR_CACHE_HIT" = "true" ] && echo "‚úÖ HIT" || echo "‚ùå MISS") |" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [ "${{ github.ref }}" = "refs/heads/main" ]; then
                    echo "üéØ **Branch**: Production (main)" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "üéØ **Branch**: Development" >> $GITHUB_STEP_SUMMARY
                  fi
